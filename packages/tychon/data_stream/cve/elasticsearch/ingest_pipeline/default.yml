---
description: CVE Pipeline for parsing TYCHON Vulnerability Scan Results
processors:
  - set:
      field: event.module
      value: tychon
  - set:
      tag: set_orginal
      copy_from: message
      field: original
  - json:
      field: message
      add_to_root: true
      add_to_root_conflict_strategy: replace
      tag: convert_json
  - dot_expander:
      tag: expand_dots
      field: '*'
      override: true
  - set:
      field: '@timestamp'
      value: '{{_ingest.timestamp}}'
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - date:
      tag: date_timestamp
      field: '@timestamp'
      formats:
        - ISO8601
  - set:
      field: vulnerability.due_date
      value: '1970-01-01T00:00:01Z'
      if: ctx.vulnerability.due_date == ''
  - date:
      field: vulnerability.due_date
      target_field: vulnerability.due_date
      output_format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX
      formats:
        - strict_date_optional_time
        - epoch_millis
        - date
        - 'MM/dd/yyyy'
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: event.kind
      value: state
  - set:
      field: event.category
      value: [vulnerability]
  - set:
      field: event.type
      value: [info]
  - convert:
      field: script.current_duration
      type: string
      ignore_missing: true
  - split:
      field: script.current_duration
      separator: '\.+'
      target_field: tempduration
      ignore_failure: true
  - set:
      field: script.current_duration
      value: '{{{tempduration.0}}}'
      ignore_failure: true
  - remove:
      field: tempduration
      ignore_failure: true
      ignore_missing: true
  - convert:
      tag: convert_script_current_duration
      field: script.current_duration
      type: long
      ignore_missing: true
  - script:
      source: |
              if(ctx.vulnerability?.result == 'fail'){
                ctx.event.outcome = "failure"
              }else if(ctx.vulnerability?.result == 'pass'){
                ctx.event.outcome = "success"
              }else{
                ctx.event.outcome = "unknown"
              }
  - remove:
      tag: remove_preserve_original_event
      field: original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - set:
      field: vulnerability.score.base
      value: "0.0"
      if: ctx.vulnerability.score.base == ''
      tag: set_score_base_ifblank
  - convert:
      field: vulnerability.score.base
      type: float
      ignore_failure: true
  - convert:
      field: vulnerability.year
      type: long
  - set:
      field: vulnerability.scanner.vendor
      value: tychon
  - set:
      field: vulnerability.category
      value: [oval]
  - set:
      field: vulnerability.enumeration
      value: CVE
  - remove:
      field: message
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
